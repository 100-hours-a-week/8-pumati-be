pipeline {
    // 파이프라인 전체를 Docker 컨테이너에서 실행
    agent {
        kubernetes {
            yaml '''
apiVersion: v1
kind: Pod
spec:
  securityContext:
    runAsUser: 1000
    runAsGroup: 1000
    fsGroup: 1000
  containers:
  - name: openjdk
    image: cimg/openjdk:21.0
    command: [cat]
    tty: true
    securityContext:
      runAsUser: 1000
      runAsGroup: 1000
    volumeMounts:
    - name: workspace-volume
      mountPath: /home/jenkins/agent
  - name: kaniko
    image: gcr.io/kaniko-project/executor:debug
    command: [/busybox/cat]
    tty: true
    volumeMounts:
    - name: workspace-volume
      mountPath: /home/jenkins/agent
  - name: aws-cli
    image: cimg/aws:2023.05
    command: [cat]
    tty: true
    securityContext:
      runAsUser: 1000
      runAsGroup: 1000
    volumeMounts:
    - name: workspace-volume
      mountPath: /home/jenkins/agent
  volumes:
  - name: workspace-volume
    emptyDir: {}
            '''
        }
    }
    
    // 환경 변수 설정
    environment {
        // AWS 공개 정보 (깃에 올려도 안전)
        AWS_REGION = 'ap-northeast-2'        // 서울 리전
        ECR_REPOSITORY = 'pumati-dev-backend-ecr'  // ECR 리포지토리 이름
        
        // 이미지 태그 설정 (브랜치명과 빌드 번호 조합)
        IMAGE_TAG = "${BRANCH_NAME}-${BUILD_NUMBER}"
        
        // Gradle 홈 디렉토리 설정 (권한 문제 해결)
        GRADLE_USER_HOME = '/home/jenkins/agent/.gradle'
        GRADLE_OPTS = '-Dorg.gradle.daemon=false -Dorg.gradle.caching=false'
        
        // Java 버전 설정 (시스템 기본 Java 사용)
        // Jenkins 서버에 Java 21이 설치되어 있어야 함
        // JAVA_HOME = tool name: 'jdk-21', type: 'jdk'
        // PATH = "${JAVA_HOME}/bin:${PATH}"
    }
    
    stages {
        // 1. 소스 코드 체크아웃
        stage('Checkout') {
            steps {
                container('openjdk') {
                    echo '소스 코드 체크아웃 완료'
                    script {
                        // 더 간단하고 안전한 Git 명령어 사용
                        try {
                            def gitCommit = sh(
                                script: 'git rev-parse HEAD',
                                returnStdout: true
                            ).trim()
                            echo "Git Commit: ${gitCommit}"
                        } catch (Exception e) {
                            echo "Git commit 정보를 가져올 수 없습니다: ${e.getMessage()}"
                        }
                        
                        try {
                            def gitBranch = sh(
                                script: 'git branch --show-current || echo "detached"',
                                returnStdout: true
                            ).trim()
                            echo "Git Branch: ${gitBranch}"
                        } catch (Exception e) {
                            echo "Git branch 정보를 가져올 수 없습니다: ${e.getMessage()}"
                        }
                        
                        // 작업 디렉토리 확인
                        sh 'pwd'
                        sh 'ls -la'
                    }
                }
            }
        }
        
        // 2. 환경 설정 파일 준비
        stage('Setup Environment') {
            steps {
                container('openjdk') {
                    echo '환경 설정 파일 및 AWS 정보 준비 중...'
                    
                    script {
                        withCredentials([string(credentialsId: 'aws-account-id', variable: 'AWS_ACCOUNT_ID')]) {
                            env.DOCKER_IMAGE_NAME = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}"
                            env.LATEST_IMAGE_NAME = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:latest"
                            echo "Docker 이미지: ${env.DOCKER_IMAGE_NAME}"
                            echo "Latest 이미지: ${env.LATEST_IMAGE_NAME}"
                        }
                    }
                    
                    withCredentials([file(credentialsId: 'be-env', variable: 'ENV_FILE')]) {
                        sh 'cp $ENV_FILE .env'
                        sh 'ls -la .env'
                    }
                }
            }
        }
        
        // 3. Gradle 빌드 준비
        stage('Prepare Build') {
            steps {
                container('openjdk') {
                    echo 'Gradle 빌드 준비 중...'
                    script {
                        // Gradle 홈 디렉토리 생성
                        sh 'mkdir -p /home/jenkins/agent/.gradle'
                        sh 'id && pwd && ls -la /home/jenkins/agent/'
                        
                        try {
                            sh 'java -version'
                        } catch (Exception e) {
                            echo "Java 버전 확인 실패: ${e.getMessage()}"
                        }
                        
                        try {
                            sh 'chmod +x gradlew'
                            echo 'gradlew 실행 권한 부여 완료'
                        } catch (Exception e) {
                            echo "gradlew 권한 설정 실패: ${e.getMessage()}"
                        }
                        
                        try {
                            sh 'GRADLE_USER_HOME=/home/jenkins/agent/.gradle ./gradlew --version'
                        } catch (Exception e) {
                            echo "Gradle 버전 확인 실패: ${e.getMessage()}"
                        }
                    }
                }
            }
        }
        
        // 4. 테스트 실행
        stage('Test') {
            steps {
                container('openjdk') {
                    echo '단위 테스트 실행 중...'
                    script {
                        try {
                            // 환경 변수 로드 및 테스트 실행
                            sh '''
                                # Gradle 홈 디렉토리 확인
                                export GRADLE_USER_HOME=/home/jenkins/agent/.gradle
                                mkdir -p $GRADLE_USER_HOME
                                
                                if [ -f .env ]; then
                                    echo "환경 파일 발견, 로드 중..."
                                    set -a && . ./.env && set +a
                                else
                                    echo "환경 파일이 없습니다."
                                fi
                                
                                echo "테스트 실행 시작..."
                                echo "GRADLE_USER_HOME: $GRADLE_USER_HOME"
                                ./gradlew test --no-daemon --stacktrace --gradle-user-home=$GRADLE_USER_HOME
                            '''
                        } catch (Exception e) {
                            echo "테스트 실행 중 오류: ${e.getMessage()}"
                            currentBuild.result = 'UNSTABLE'
                        }
                    }
                }
            }
            
            // 테스트 결과 발행
            post {
                always {
                    container('openjdk') {
                        script {
                            try {
                                junit testResults: 'build/test-results/test/*.xml', allowEmptyResults: true
                                echo '테스트 결과 발행 완료'
                            } catch (Exception e) {
                                echo "테스트 결과 발행 실패: ${e.getMessage()}"
                            }
                        }
                    }
                }
            }
        }
        
        // 5. 애플리케이션 빌드
        stage('Build Application') {
            steps {
                container('openjdk') {
                    echo 'Spring Boot 애플리케이션 빌드 중...'
                    script {
                        try {
                            sh '''
                                export GRADLE_USER_HOME=/home/jenkins/agent/.gradle
                                ./gradlew clean build -x test --no-daemon --stacktrace --gradle-user-home=$GRADLE_USER_HOME
                            '''
                            sh 'ls -la build/libs/'
                            echo '애플리케이션 빌드 완료'
                        } catch (Exception e) {
                            echo "애플리케이션 빌드 실패: ${e.getMessage()}"
                            error("빌드 실패")
                        } finally {
                            // 빌드 완료 후 환경 파일 정리
                            sh 'rm -f .env || true'
                            echo '.env 파일 정리 완료'
                        }
                    }
                }
            }
        }
        
        // 6. ECR 로그인 및 설정
        stage('Setup ECR') {
            steps {
                container('aws-cli') {
                    echo 'ECR 로그인 및 리포지토리 설정 중...'
                    withCredentials([
                        string(credentialsId: 'aws-account-id', variable: 'AWS_ACCOUNT_ID'),
                        aws(credentialsId: 'aws-credentials', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')
                    ]) {
                        sh 'aws --version'
                        sh 'aws sts get-caller-identity'
                        
                        // ECR 리포지토리 존재 확인 및 생성
                        sh """
                            aws ecr describe-repositories --repository-names ${ECR_REPOSITORY} --region ${AWS_REGION} || \\
                            aws ecr create-repository --repository-name ${ECR_REPOSITORY} --region ${AWS_REGION}
                        """
                        
                        // Kaniko용 ECR 인증 설정 파일 생성
                        sh """
                            mkdir -p /home/jenkins/agent/.docker
                            aws ecr get-login-password --region ${AWS_REGION} | \\
                            echo "{\\"auths\\": {\\"${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com\\": {\\"auth\\": \\"\$(cat - | base64 -w0)\\"}}}" > /home/jenkins/agent/.docker/config.json
                        """
                    }
                }
            }
        }
        
        // 7. Kaniko로 Docker 이미지 빌드 및 푸시
        stage('Build and Push Docker Image') {
            steps {
                container('kaniko') {
                    echo 'Kaniko로 Docker 이미지 빌드 및 ECR 푸시 중...'
                    
                    // 🔥 AWS 크레덴셜을 Kaniko에도 전달
                    withCredentials([
                        string(credentialsId: 'aws-account-id', variable: 'AWS_ACCOUNT_ID'),
                        aws(credentialsId: 'aws-credentials', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')
                    ]) {
                        script {
                            sh """
                                # AWS 환경변수 설정
                                export AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
                                export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
                                export AWS_DEFAULT_REGION=${AWS_REGION}
                                
                                # Docker config.json 파일이 있는지 확인
                                if [ -f /home/jenkins/agent/.docker/config.json ]; then
                                    echo "✅ Docker config.json 파일 발견"
                                    mkdir -p /kaniko/.docker
                                    cp /home/jenkins/agent/.docker/config.json /kaniko/.docker/config.json
                                else
                                    echo "❌ Docker config.json 파일 없음"
                                fi
                                
                                # Kaniko executor로 이미지 빌드 및 푸시
                                /kaniko/executor \\
                                    --context=. \\
                                    --dockerfile=ci/dev/Dockerfile \\
                                    --destination=${env.DOCKER_IMAGE_NAME} \\
                                    --destination=${env.LATEST_IMAGE_NAME} \\
                                    --cache=true \\
                                    --compressed-caching=false \\
                                    --cleanup
                            """
                            
                            echo "✅ 이미지 빌드 및 푸시 완료!"
                            echo "📦 이미지: ${env.DOCKER_IMAGE_NAME}"
                            echo "📦 Latest: ${env.LATEST_IMAGE_NAME}"
                        }
                    }
                }
            }
        }
        
        // 8. 빌드 정리
        stage('Cleanup') {
            steps {
                container('openjdk') {
                    echo '빌드 정리 중...'
                    sh '''
                        # 임시 파일들 정리
                        rm -f .env || true
                        rm -rf /home/jenkins/agent/.docker || true
                        echo "정리 완료"
                    '''
                }
            }
        }
    }
    
    // 빌드 후 처리
    post {
        always {
            script {
                echo '빌드 파이프라인 완료. 작업 공간을 정리합니다.'
                
                // Jenkins 워크스페이스 정리
                try {
                    deleteDir()
                    echo '작업 공간 정리 완료'
                } catch (Exception e) {
                    echo "작업 공간 정리 중 오류 (무시됨): ${e.getMessage()}"
                }
            }
        }
        
        success {
            script {
                echo '✅ 빌드 성공! 🎉'
                echo "📦 Docker 이미지: ${env.DOCKER_IMAGE_NAME}"
                echo "🏷️  이미지 태그: ${env.IMAGE_TAG}"
                echo "📍 ECR 리포지토리: ${ECR_REPOSITORY}"
                echo "🌍 AWS 리전: ${AWS_REGION}"
            }
        }
        
        failure {
            script {
                echo '❌ 빌드 실패!'
                echo "🔍 로그를 확인하여 실패 원인을 파악하세요."
                echo "🌐 빌드 URL: ${env.BUILD_URL}"
            }
        }
        
        unstable {
            script {
                echo '⚠️ 빌드 불안정'
                echo "📊 테스트에서 일부 실패가 발생했습니다."
            }
        }
    }
}
