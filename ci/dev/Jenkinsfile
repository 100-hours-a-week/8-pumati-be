pipeline {
    // 파이프라인 전체를 Docker 컨테이너에서 실행
    agent {
        kubernetes {
            yaml '''
apiVersion: v1
kind: Pod
spec:
  containers:
  - name: openjdk
    image: cimg/openjdk:21.0-node
    command:
    - cat
    tty: true
  - name: aws-docker
    image: cimg/aws:2023.10  # AWS CLI + Docker 포함
    command:
    - cat
    tty: true
    volumeMounts:
    - name: docker-sock
      mountPath: /var/run/docker.sock
  volumes:
  - name: docker-sock
    hostPath:
      path: /var/run/docker.sock
            '''
        }
    }
    
    // 환경 변수 설정
    environment {
        // AWS 공개 정보 (깃에 올려도 안전)
        AWS_REGION = 'ap-northeast-2'        // 서울 리전
        ECR_REPOSITORY = 'pumati-dev-backend-ecr'  // ECR 리포지토리 이름
        
        // 이미지 태그 설정 (브랜치명과 빌드 번호 조합)
        IMAGE_TAG = "${BRANCH_NAME}-${BUILD_NUMBER}"
        
        // Java 버전 설정 (시스템 기본 Java 사용)
        // Jenkins 서버에 Java 21이 설치되어 있어야 함
        // JAVA_HOME = tool name: 'jdk-21', type: 'jdk'
        // PATH = "${JAVA_HOME}/bin:${PATH}"
    }
    
    stages {
        // 1. 소스 코드 체크아웃
        stage('Checkout') {
            steps {
                container('openjdk') {
                    echo '소스 코드 체크아웃 완료'
                    script {
                        def gitCommit = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
                        def gitBranch = sh(returnStdout: true, script: 'git rev-parse --abbrev-ref HEAD').trim()
                        echo "Git Branch: ${gitBranch}"
                        echo "Git Commit: ${gitCommit}"
                    }
                }
            }
        }
        
        // 2. 환경 설정 파일 준비
        stage('Setup Environment') {
            steps {
                container('openjdk') {
                    echo '환경 설정 파일 및 AWS 정보 준비 중...'
                    
                    script {
                        withCredentials([string(credentialsId: 'aws-account-id', variable: 'AWS_ACCOUNT_ID')]) {
                            env.DOCKER_IMAGE_NAME = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}"
                            echo "Docker 이미지: ${env.DOCKER_IMAGE_NAME}"
                        }
                    }
                    
                    withCredentials([file(credentialsId: 'be-env', variable: 'ENV_FILE')]) {
                        sh 'cp $ENV_FILE .env'
                        sh 'ls -la .env'
                    }
                }
            }
        }
        
        // 3. Gradle 빌드 준비
        stage('Prepare Build') {
            steps {
                container('openjdk') {
                    echo 'Gradle 빌드 준비 중...'
                    sh 'java -version'
                    sh 'chmod +x gradlew'
                    sh './gradlew --version'
                }
            }
        }
        
        // 4. 테스트 실행
        stage('Test') {
            steps {
                container('openjdk') {
                    echo '단위 테스트 실행 중...'
                    sh '''
                        if [ -f .env ]; then
                            set -a && . ./.env && set +a
                        fi
                        ./gradlew test
                    '''
                }
            }
            
            // 테스트 결과 발행
            post {
                always {
                    junit 'build/test-results/test/*.xml'
                }
            }
        }
        
        // 5. 애플리케이션 빌드
        stage('Build Application') {
            steps {
                container('openjdk') {
                    echo 'Spring Boot 애플리케이션 빌드 중...'
                    sh './gradlew clean build -x test'
                    sh 'ls -la build/libs/'
                }
            }
        }
        
        // 6. Docker 이미지 빌드
        stage('Build Docker Image') {
            steps {
                container('aws-docker') {
                    echo 'Docker 이미지 빌드 중...'
                    sh 'docker --version'
                    sh """
                        docker build -f ci/dev/Dockerfile \\
                            -t ${env.DOCKER_IMAGE_NAME} \\
                            -t ${ECR_REPOSITORY}:latest \\
                            .
                    """
                    sh "docker images ${ECR_REPOSITORY}"
                }
            }
        }
        
        // 7. ECR 로그인 및 이미지 푸시
        stage('Push to ECR') {
            steps {
                container('aws-docker') {
                    echo 'ECR에 Docker 이미지 푸시 중...'
                    withCredentials([
                        string(credentialsId: 'aws-account-id', variable: 'AWS_ACCOUNT_ID'),
                        aws(credentialsId: 'aws-credentials', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')
                    ]) {
                        sh 'aws --version'
                        sh 'aws sts get-caller-identity'
                        sh """
                            aws ecr get-login-password --region ${AWS_REGION} | \\
                            docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
                        """
                        sh """
                            aws ecr describe-repositories --repository-names ${ECR_REPOSITORY} --region ${AWS_REGION} || \\
                            aws ecr create-repository --repository-name ${ECR_REPOSITORY} --region ${AWS_REGION}
                        """
                        sh "docker push ${env.DOCKER_IMAGE_NAME}"
                        
                        script {
                            def latestImageName = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:latest"
                            sh "docker tag ${env.DOCKER_IMAGE_NAME} ${latestImageName}"
                            sh "docker push ${latestImageName}"
                        }
                    }
                }
            }
        }
        
        // 8. 빌드 정리
        stage('Cleanup') {
            steps {
                container('aws-docker') {
                    echo '빌드 정리 중...'
                    sh """
                        docker rmi ${env.DOCKER_IMAGE_NAME} || true
                        docker rmi ${ECR_REPOSITORY}:latest || true
                        docker system prune -f
                    """
                }
            }
        }
    }
    
    // 빌드 후 처리
    post {
        always {
            echo '빌드 파이프라인 완료'
            
            // 환경 변수 파일 정리
            sh 'rm -f .env'
            
            // 작업 공간 정리
            cleanWs()
        }
        
        success {
            echo '빌드 성공! 🎉'
            
            // 성공 시 알림 (Slack, 이메일 등)
            // slackSend(
            //     color: 'good',
            //     message: ":white_check_mark: 빌드 성공: ${env.JOB_NAME} - ${env.BUILD_NUMBER}"
            // )
        }
        
        failure {
            echo '빌드 실패! ❌'
            
            // 실패 시 알림
            // slackSend(
            //     color: 'danger',
            //     message: ":x: 빌드 실패: ${env.JOB_NAME} - ${env.BUILD_NUMBER}"
            // )
        }
        
        unstable {
            echo '빌드 불안정 ⚠️'
        }
    }
}
