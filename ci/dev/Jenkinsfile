pipeline {
    // 파이프라인 전체를 Docker 컨테이너에서 실행
    agent {
        docker {
            image 'cimg/openjdk:21.0-node'  // Java 21 + Docker + AWS CLI가 포함된 이미지
            args '-v /var/run/docker.sock:/var/run/docker.sock'  // Docker 소켓 마운트
        }
    }
    
    // 환경 변수 설정
    environment {
        // AWS 공개 정보 (깃에 올려도 안전)
        AWS_REGION = 'ap-northeast-2'        // 서울 리전
        ECR_REPOSITORY = 'pumati-dev-backend-ecr'  // ECR 리포지토리 이름
        
        // 이미지 태그 설정 (브랜치명과 빌드 번호 조합)
        IMAGE_TAG = "${BRANCH_NAME}-${BUILD_NUMBER}"
        
        // Java 버전 설정 (시스템 기본 Java 사용)
        // Jenkins 서버에 Java 21이 설치되어 있어야 함
        // JAVA_HOME = tool name: 'jdk-21', type: 'jdk'
        // PATH = "${JAVA_HOME}/bin:${PATH}"
    }
    
    stages {
        // 1. 소스 코드 체크아웃
        stage('Checkout') {
            steps {
                // 소스 코드 체크아웃 (이미 Jenkins에서 자동으로 처리됨)
                echo '소스 코드 체크아웃 완료'
                
                // 현재 브랜치와 커밋 정보 출력
                script {
                    def gitCommit = sh(returnStdout: true, script: 'git rev-parse HEAD').trim()
                    def gitBranch = sh(returnStdout: true, script: 'git rev-parse --abbrev-ref HEAD').trim()
                    echo "Git Branch: ${gitBranch}"
                    echo "Git Commit: ${gitCommit}"
                }
            }
        }
        
        // 2. 환경 설정 파일 준비
        stage('Setup Environment') {
            steps {
                echo '환경 설정 파일 및 AWS 정보 준비 중...'
                
                script {
                    withCredentials([string(credentialsId: 'aws-account-id', variable: 'AWS_ACCOUNT_ID')]) {
                        env.DOCKER_IMAGE_NAME = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPOSITORY}:${IMAGE_TAG}"
                    }
                }
                
                withCredentials([file(credentialsId: 'be-env', variable: 'ENV_FILE')]) {
                    sh 'cp $ENV_FILE .env'
                }
            }
        }
        
        // 3. Gradle 빌드 준비
        stage('Prepare Build') {
            steps {
                echo 'Gradle 빌드 준비 중...'
                
                // Java 버전 확인
                sh '''
                    echo "현재 Java 버전 확인:"
                    java -version
                    echo "JAVA_HOME: $JAVA_HOME"
                '''
                
                // Gradle wrapper 실행 권한 부여
                sh 'chmod +x gradlew'
                
                // Gradle 의존성 다운로드 및 버전 확인
                sh './gradlew --version'
            }
        }
        
        // 4. 테스트 실행
        stage('Test') {
            steps {
                echo '단위 테스트 실행 중...'
                
                sh '''
                    if [ -f .env ]; then
                        set -a && . ./.env && set +a
                    fi
                    chmod +x gradlew
                    ./gradlew test
                '''
            }
            
            // 테스트 결과 발행
            post {
                always {
                    // 테스트 결과 파일 발행 (항상 실행)
                    junit 'build/test-results/test/*.xml'
                }
            }
        }
        
        // 5. 애플리케이션 빌드
        stage('Build Application') {
            steps {
                echo 'Spring Boot 애플리케이션 빌드 중...'
                
                sh './gradlew clean build -x test'
            }
        }
        
        // 6. Docker 이미지 빌드
        stage('Build Docker Image') {
            steps {
                sh """
                    docker build -f ci/dev/Dockerfile \\
                        -t ${env.DOCKER_IMAGE_NAME} \\
                        -t ${ECR_REPOSITORY}:latest \\
                        .
                """
            }
        }
        
        // 7. ECR 로그인 및 이미지 푸시
        stage('Push to ECR') {
            steps {
                withCredentials([
                    string(credentialsId: 'aws-account-id', variable: 'AWS_ACCOUNT_ID'),
                    aws(credentialsId: 'aws-credentials', accessKeyVariable: 'AWS_ACCESS_KEY_ID', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')
                ]) {
                    sh """
                        aws ecr get-login-password --region ${AWS_REGION} | \\
                        docker login --username AWS --password-stdin ${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com
                        
                        aws ecr describe-repositories --repository-names ${ECR_REPOSITORY} --region ${AWS_REGION} || \\
                        aws ecr create-repository --repository-name ${ECR_REPOSITORY} --region ${AWS_REGION}
                        
                        docker push ${env.DOCKER_IMAGE_NAME}
                    """
                }
            }
        }
        
        // 8. 빌드 정리
        stage('Cleanup') {
            steps {
                echo '빌드 정리 중...'
                
                script {
                    // 로컬 Docker 이미지 정리 (디스크 공간 절약)
                    sh """
                        docker rmi ${env.DOCKER_IMAGE_NAME} || true
                        docker rmi ${ECR_REPOSITORY}:latest || true
                        docker system prune -f
                    """
                }
            }
        }
    }
    
    // 빌드 후 처리
    post {
        always {
            echo '빌드 파이프라인 완료'
            
            // 환경 변수 파일 정리
            sh 'rm -f .env'
            
            // 작업 공간 정리
            cleanWs()
        }
        
        success {
            echo '빌드 성공! 🎉'
            
            // 성공 시 알림 (Slack, 이메일 등)
            // slackSend(
            //     color: 'good',
            //     message: ":white_check_mark: 빌드 성공: ${env.JOB_NAME} - ${env.BUILD_NUMBER}"
            // )
        }
        
        failure {
            echo '빌드 실패! ❌'
            
            // 실패 시 알림
            // slackSend(
            //     color: 'danger',
            //     message: ":x: 빌드 실패: ${env.JOB_NAME} - ${env.BUILD_NUMBER}"
            // )
        }
        
        unstable {
            echo '빌드 불안정 ⚠️'
        }
    }
}
